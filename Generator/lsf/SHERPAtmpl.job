#!/bin/sh -f
#
# ---------------------------------------------------------
# LSF parameters
# ---------------------------------------------------------
#
set nonomatch
echo ""
echo "Job is running on `uname -a`"
echo "Job started on `date`"
echo ""
echo "Job has been submitted from : " $LS_SUBCWD
#if ( ${OS} != "Solaris" && ${OS} != "Linux" ) exit
#setenv OS_VERS Linux__2.6
#
#----------------------------------------------------------
# S e t t h e r u n t i m e e n v i r o n m e n t
#----------------------------------------------------------
#
echo "Step 1 : Setting the environment"
#export SCRAM_ARCH=slc6_amd64_gcc493
export SCRAM_ARCH=slc6_amd64_gcc700
export CMSSW_SRC=INPUT01/src ##terminate at package SherpaGeneration
export CODE_SRC=INPUT02 ##CURRENT
export RUN_CARD=Run.dat_INPUT1
export SherpackLocation=/eos/user/${USER:0:1}/$USER
export CMSSWRELEASE=CMSSW_10_3_0_pre5
export nevent=XX_NEVENT_XX
#rm -rf ${CODE_SRC}/CMSSW_INPUT1_mphi_INPUT3_mchi_INPUT2_mhs_INPUT4.job

echo "- - - - - PATH SETTING- - - - -"
echo "SCRAM_ARCH is : " ${SCRAM_ARCH}
echo "Current Directory is : " ${CODE_SRC}
echo "WorkDir is : " ${WORKDIR}
echo "Run card is : " ${RUN_CARD}
echo "Sherpack Location is : " ${SherpackLocation}
echo "Disk space on this batch machine:"
df -h
#
#----------------------------------------------------------
# Run CMSSW
#----------------------------------------------------------
#
echo "Step 2 : Run"
#####################################
# Step-1: #
#####################################
echo "Start Step-1: Generator"
cd ${WORKDIR}
scramv1 project CMSSW ${CMSSWRELEASE}
echo "scramv1 complete"
cd ${CMSSWRELEASE}/src
eval `scramv1 runtime -sh`

#populate with necessary packages.
git cms-addpkg -q GeneratorInterface/SherpaInterface
#copy nessecary files
cp -r ${CMSSW_SRC}/SherpaGeneration .
scram b -j6

#Generate Sherpack
cd SherpaGeneration/Generator/test
scp ../data/Inclusives/${RUN_CARD} .
#scp ./${RUN_CARD} .
ls
echo "Running run_MakeSherpaLibs.sh INPUT1"
sh run_MakeSherpaLibs.sh INPUT1 &> Log_step1
echo "Running run_PrepareSherpaLibs.sh INPUT1 INPUT2"
sh run_PrepareSherpaLibs.sh INPUT1 INPUT2 &> Log_step2

#copy all produced file to EOS
if [ -e "${SherpackLocation}/SHERPA_INPUT1" ];then
    rm ${SherpackLocation}/SHERPA_INPUT1
fi
mkdir -p ${SherpackLocation}/SHERPA_INPUT1
scp sherpa_INPUT1_crdE.tgz ${SherpackLocation}/SHERPA_INPUT1   
scp sherpa_INPUT1_libs.tgz  ${SherpackLocation}/SHERPA_INPUT1
scp sherpa_INPUT1_MASTER.tgz ${SherpackLocation}/SHERPA_INPUT1
scp sherpa_INPUT1_crss.tgz  ${SherpackLocation}/SHERPA_INPUT1
scp sherpa_INPUT1_logL.tgz  ${SherpackLocation}/SHERPA_INPUT1
scp sherpa_INPUT1_migr.tgz ${SherpackLocation}/SHERPA_INPUT1
scp sherpa_INPUT1_13TeV_MASTER.md5 ${SherpackLocation}/SHERPA_INPUT1
scp sherpa_INPUT1_MASTER_cff.py ${SherpackLocation}/SHERPA_INPUT1
scp MPI_Cross_Sections.dat ${SherpackLocation}/SHERPA_INPUT1
scp Log_step1 Log_step2 ${SherpackLocation}/SHERPA_INPUT1

#UNLESS you wanna generate some event file here
#assgin sherpack to current dir;
#HERE=`pwd -p`
#sed -e "s,XXX,${HERE}/," sherpa_INPUT1_MASTER_cff.py
################
#scp sherpa_INPUT1_MASTER_cff.py ../python
#cd ..
#scram b 
#cd test
#echo "Running cmsDriver"
#cmsDriver.py SherpaGeneration/Generator/python/sherpa_INPUT1_MASTER_cff.py -s GEN -n ${nevent} --no_exec --conditions auto:mc --eventcontent RAWSIM &> Log_step3
#echo "Generating Events"
#cmsRun sherpa_INPUT1_MASTER_cff_py_GEN.py &> Log_step4
#echo "DONE --> Output look like this"
#ls
#scp sherpa_INPUT1_MASTER_cff_py_GEN.root ${SherpackLocation}/SHERPA_INPUT1
#scp Log_step3 Log_step4 ${SherpackLocation}/SHERPA_INPUT1

#
#----------------------------------------------------------
# Clear job and log
#----------------------------------------------------------
#
echo "====== Sherpack is located at ====="
echo "${SherpackLocation}/SHERPA_INPUT1"
rm -rf ${CODE_SRC}/Log_*
rm -rf ${CODE_SRC}/LSF*
rm -rf ${CODE_SRC}/core*
rm -rf /afs/cern.ch/user/${USER:0:1}/${USER}/LSF*
cd ${WORKDIR}
rm -rf CMSSW*
echo ""
echo "Job end `date`"
echo ""
exit ${status}
